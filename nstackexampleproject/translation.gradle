import groovy.json.JsonSlurper
import groovy.json.StringEscapeUtils

apply plugin: 'base'
apply plugin: 'android'
apply plugin: TranslationPlugin

class TranslationPlugin implements Plugin<Project> {

    def project = null

    void apply(Project project) {
        // Add the 'greeting' extension object
        project.extensions.create("translation", TranslationPluginExtension)
        // Add a task that uses the configuration
        project.task('fetchTranslation') << {
            mustRunAfter clean
            println project.translation.url
            println project.translation.acceptHeader
            println project.translation.appId
            //generateTranslationClass.execute()
            def json = fetchJson( project )
            def languageObject = json.data."${project.translation.acceptHeader}"
            generateJavaClass(languageObject, project)
        }

        project.task('generateTranslationStrings') << {
            println "Fetching: " + project.translation.acceptHeader
            def json = fetchJson( project )
            def languageObject = json.data."${project.translation.acceptHeader}"
            generateStringsResource(languageObject, project)
            writeFallbackAsset(json, project)
        }

        project.task('generateTranslationClass') << {
            println "Fetching: " + project.translation.acceptHeader
            this.project = project
            def jsonText = fetchJson( project )
            def json = parseJson(jsonText)
            def languageObject = json.data."${project.translation.acceptHeader}"
            generateJavaClass(languageObject, project)
            writeFallbackAsset(jsonText, project)
            //generateJavaEnum(languageObject, project)
        }
    }

    String generateContentUrl() {
        def url = this.project.translation.contentUrl + "?"

        if( this.project.translation.allLanguages && this.project.translation.flattenSections ) {
            url += "all=true&flat=true"
        }

        else if( this.project.translation.allLanguages ) {
            url += "all=true"
        }

        else if( this.project.translation.flattenSections ) {
            url += "flat=true"
        }

        return url
    }

    Object fetchJson( project ) {
        def inputFile = new URL(generateContentUrl())
        def fetchedJson = inputFile.getText(requestProperties: [
                'Accept-Language':project.translation.acceptHeader,
                'X-Application-Id':project.translation.appId,
                'X-Rest-Api-Key':project.translation.apiKey
        ])

        return fetchedJson
    }

    Object parseJson( jsonText ) {
        def json = new JsonSlurper().parseText(jsonText)
        return json
    }

    void writeFallbackAsset(json, project) {
        def assetsDir = new File( project.translation.assetsPath )
        if( !assetsDir.exists() ) {
            assetsDir.mkdirs();
        }

        def translationFallback = new File(project.translation.assetsPath + "/translations.json");
        translationFallback.write( json.toString() )
    }

    void generateJavaClass( json, project ) {
        def translationsFile = new File(project.translation.classPath)
        def translationClassString = "package ${project.translation.modelPath};\n\n"
        translationClassString += "/**\n" +
                " * Created by Gradle translation\n" +
                " */\n\n"
        translationClassString += "public class Translation {\n"
        json.each {
            k, v ->
                if( v instanceof String ) {
                    translationClassString += "\tpublic static String ${k} = \"${StringEscapeUtils.escapeJava(v).replace("'","\\'")}\";\n";
                }
                else if( v instanceof Object ) {
                    if( k == "default" ) {
                        k = "defaultSection"
                    }
                    translationClassString += generateInnerClass( k, v )
                }
        }
        translationClassString += "}\n"
        translationsFile.write( translationClassString )
    }

    String generateInnerClass(className, data) {
        println "generateInnerClass from: " + data

        def innerClass = "\tpublic final static class ${className} {\n"
        data.each {
            k, v ->
                innerClass += "\t\tpublic static String ${k} = \"${StringEscapeUtils.escapeJava(v).replace("'","\\'")}\";\n";
        }
        innerClass += "\t}\n"

        //innerClass += "\tpublic ${className.toUpperCase()} ${className} = new ${className.toUpperCase()}();\n"

        return innerClass
    }

    void generateStringsResource( json, project ) {
        def sw = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(sw)

        println json

        // add json values to the xml builder
        xml.resources() {
            json.each {
                k, v ->
                    string(name: "${k}", "${StringEscapeUtils.escapeJava(v).replace("'","\\'")}")
                    println k
                    println v
            }
        }

        def stringsFile = new File(project.translation.stringsPath)
        stringsFile.write(sw.toString())
    }
}

class TranslationPluginExtension {
    def String url = "https://baas.like.st/api/v1/translate/mobile/languages/best_fit"
    def String contentUrl = "https://baas.like.st/api/v1/translate/mobile/keys"
    def String appId = "zd2FZaCwYMJLRNAfwjp9myhfnJVMmsd5OHpU"
    def String apiKey = "DUFs3ueFIyIpe7vD1CQCw7qFDW5gjAusbUBm"
    def String modelPath = "dk.nodes.ntemplate.util.model"
    def String classPath = "nTemplate/src/main/java/dk/nodes/ntemplate/util/model/Translation.java"
    def String stringsPath = "nTemplate/src/main/res/values/translationstrings.xml"
    def String acceptHeader = 'en-US'
    def String assetsPath = "nTemplate/src/main/assets"
    def boolean allLanguages = true
    def boolean flattenSections = false
}
